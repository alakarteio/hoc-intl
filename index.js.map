{"version":3,"file":"index.js","sources":["src/utils/getLocale.js","src/format.js","src/core.jsx","src/utils/getDisplayName.js"],"sourcesContent":["export default (context) => {\n  if (!context.store\n    || !context.store.getState()\n    || !context.store.getState().config\n    || !context.store.getState().config.locale) {\n    throw new Error('/ HOC k-intl / locale is not readable. make sure that this one is available at `config.local` on your redux store')\n  }\n  return context.store.getState().config.locale\n}\n","import { get, template } from 'lodash'\n\nconst interpolate = /{{([\\s\\S]+?)}}/g\nconst defaultLabel = {}\n\nexport default locale => (config, componentProps) =>\n  Object\n    .keys(config)\n    .reduce((acc, curr) => {\n      const label = get(locale, config[curr])\n      if (componentProps && componentProps[curr]) {\n        return { ...acc, [curr]: template(label, { interpolate })(componentProps[curr]) }\n      }\n      return { ...acc, [curr]: label }\n    }, defaultLabel)\n","import React, { Component } from 'react'\nimport { getDisplayName, getLocale } from './utils'\nimport format from './format'\n\nexport default config => WrappedComponent => class extends Component {\n  static displayName = getDisplayName(WrappedComponent)\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.locale = {}\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.context.store.subscribe(() => { this.format() })\n    this.format()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.format(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  format = (nextProps) => {\n    /* take locale on `config.locale` reducer */\n    const locale = getLocale(this.context)\n\n    /* not change labels when the sub store local not change */\n    if (locale === this.locale) return\n    this.locale = locale\n\n    this.setState(state => ({\n      ...state,\n      injectedProps: {\n        labels: format(this.context.store.getState().config.locale)(\n          config,\n          nextProps || this.props,\n        ),\n      },\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n","export default Component => `Intl(${\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n})`\n"],"names":["context","store","getState","config","locale","Error","interpolate","defaultLabel","componentProps","Object","keys","reduce","acc","curr","label","get","template","props","format","nextProps","getLocale","_this","setState","state","Component","unsubscribe","this","subscribe","React","WrappedComponent","injectedProps","displayName","name","constructor","contextTypes"],"mappings":"mSAAgBA,QACTA,EAAQC,OACPD,EAAQC,MAAMC,YACdF,EAAQC,MAAMC,WAAWC,QACzBH,EAAQC,MAAMC,WAAWC,OAAOC,cAC9B,IAAIC,MAAM,4HAEXL,EAAQC,MAAMC,WAAWC,OAAOC,6xBCLnCE,EAAc,kBACdC,0BAEmB,SAACJ,EAAQK,UAChCC,OACGC,KAAKP,GACLQ,OAAO,SAACC,EAAKC,OACNC,EAAQC,MAAIX,EAAQD,EAAOU,WAC7BL,GAAkBA,EAAeK,QACvBD,OAAMC,EAAOG,WAASF,GAASR,eAAlBU,CAAiCR,EAAeK,WAE/DD,OAAMC,EAAOC,KACxBP,+BCVkB,wDAOXU,EAAOjB,4EACXiB,EAAOjB,aAoBfkB,OAAS,SAACC,OAEFf,EAASgB,EAAUC,EAAKrB,SAG1BI,IAAWiB,EAAKjB,WACfA,OAASA,IAETkB,SAAS,wBACTC,yBAEOL,EAAOG,EAAKrB,QAAQC,MAAMC,WAAWC,OAAOC,OAA5Cc,CACNf,EACAgB,GAAaE,EAAKJ,gBAhCnBb,YACAmB,8VAVkDC,6EAgBlDC,YAAcC,KAAK1B,QAAQC,MAAM0B,UAAU,aAAaT,gBACxDA,2DAGmBC,QACnBD,OAAOC,uDAIPM,sDAwBHG,gBAACC,OAEKH,KAAKT,MAELS,KAAKH,MAAMO,2BApDdC,wBAA6BF,GCJ1BE,aACPP,EAAUQ,MACTR,EAAUS,aAAeT,EAAUS,YAAYD,MAChD,iBDGIE,oBACE,kBAAM"}