{"version":3,"file":"index.js","sources":["src/utils/wrapDisplayName.js","src/utils/getLocale.js","src/format.js","src/core.jsx"],"sourcesContent":["export default (Component, wrapperName) => (\n  `${wrapperName || 'intl'} (${Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'})`\n)\n","export default (context) => {\n  if (!context.store\n    || !context.store.getState()\n    || !context.store.getState().config\n    || !context.store.getState().config.locale) {\n    throw new Error('/ HOC k-intl / locale is not readable. make sure that this one is available at `config.local` on your redux store')\n  }\n  return context.store.getState().config.locale\n}\n","import { get, template } from 'lodash'\n\nconst interpolate = /{{([\\s\\S]+?)}}/g\nconst defaultLabel = {}\n\nexport default locale => (config, componentProps) =>\n  Object\n    .keys(config)\n    .reduce((acc, curr) => {\n      const label = get(locale, config[curr])\n      if (componentProps && componentProps[curr]) {\n        return { ...acc, [curr]: template(label, { interpolate })(componentProps[curr]) }\n      }\n      return { ...acc, [curr]: label }\n    }, defaultLabel)\n","import React, { Component } from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport { wrapDisplayName, getLocale } from './utils'\nimport format from './format'\n\nexport default config => WrappedComponent => class extends Component {\n  static displayName = wrapDisplayName(WrappedComponent, 'Intl')\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.labels = {}\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.context.store.subscribe(() => { this.format() })\n    this.format()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.format(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  format = (nextProps) => {\n    /* take locale on `config.locale` reducer */\n    const locale = getLocale(this.context)\n    const labels = format(locale)(\n      config,\n      nextProps || this.props,\n    )\n    /* not change labels when the formated labels is identical */\n    if (shallowEqual(this.state.injectedProps.labels, labels)) return\n    this.setState(state => ({\n      ...state,\n      injectedProps: { labels },\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n"],"names":["context","store","getState","config","locale","Error","interpolate","defaultLabel","componentProps","Object","keys","reduce","acc","curr","label","get","template","Component","props","format","nextProps","getLocale","_this","labels","shallowEqual","state","injectedProps","setState","unsubscribe","this","subscribe","React","WrappedComponent","displayName","name","constructor","contextTypes"],"mappings":"+YAAA,eCAgBA,QACTA,EAAQC,OACPD,EAAQC,MAAMC,YACdF,EAAQC,MAAMC,WAAWC,QACzBH,EAAQC,MAAMC,WAAWC,OAAOC,cAC9B,IAAIC,MAAM,4HAEXL,EAAQC,MAAMC,WAAWC,OAAOC,6xBCLnCE,EAAc,kBACdC,0BAEmB,SAACJ,EAAQK,UAChCC,OACGC,KAAKP,GACLQ,OAAO,SAACC,EAAKC,OACNC,EAAQC,MAAIX,EAAQD,EAAOU,WAC7BL,GAAkBA,EAAeK,QACvBD,OAAMC,EAAOG,WAASF,GAASR,eAAlBU,CAAiCR,EAAeK,WAE/DD,OAAMC,EAAOC,KACxBP,+BCTkB,oBHLTU,oCGYFC,EAAOlB,4EACXkB,EAAOlB,aAoBfmB,OAAS,SAACC,OAEFhB,EAASiB,EAAUC,EAAKtB,SACxBuB,EAASJ,EAAOf,EAAPe,CACbhB,EACAiB,GAAaE,EAAKJ,OAGhBM,EAAaF,EAAKG,MAAMC,cAAcH,OAAQA,MAC7CI,SAAS,wBACTF,kBACcF,iBA9BdA,YACAE,8VAVkDR,6EAgBlDW,YAAcC,KAAK7B,QAAQC,MAAM6B,UAAU,aAAaX,gBACxDA,2DAGmBC,QACnBD,OAAOC,uDAIPQ,sDAoBHG,gBAACC,OAEKH,KAAKX,MAELW,KAAKJ,MAAMC,2BAhDdO,uBHNOhB,EGMuBe,GHLEC,aACpChB,EAAUiB,MACTjB,EAAUkB,aAAelB,EAAUkB,YAAYD,MAChD,iBGIIE,oBACE,kBAAM"}