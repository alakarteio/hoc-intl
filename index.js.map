{"version":3,"file":"index.js","sources":["src/utils/wrapDisplayName.js","src/utils/storeSelector.js","src/utils/localeDataRegistry.js","src/utils/get.js","src/format.js","src/core.jsx"],"sourcesContent":["export default (Component, wrapperName) => (\n  `${wrapperName || 'intl'} (${Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'})`\n)\n","const getConfig = (field, mandatory = true) => (context) => {\n  const config = context.store\n    && context.store.getState()\n    && context.store.getState().config\n\n  if ((!config || !config[field]) && mandatory) {\n    throw new Error(`/HOC k-intl/ ${field} is not readable. Make sure that this one is available at config.${field} on your redux store`)\n  }\n  return config[field]\n}\n\nexport const getLocale = getConfig('locale')\nexport const getLang = getConfig('lang')\nexport const getFormats = getConfig('formats', false)\n","import IntlMessageFormat from 'intl-messageformat'\n\nexport default function (data) {\n  const localeDatas = [].concat(data)\n\n  localeDatas.forEach((localeData) => {\n    // eslint-disable-next-line no-underscore-dangle\n    if (localeData && localeData.locale) IntlMessageFormat.__addLocaleData(localeData)\n  })\n}\n","const get = (data, path) =>\n  path.split('.').reduce(\n    (curr, sub) => curr && curr[sub],\n    data,\n  )\n\nexport default (data, path) => (typeof path === 'string' ? get(data, path) : data)\n","// eslint-disable-next-line import/no-unresolved, import/extensions\nimport defaultLocaleData from 'k-intl/locale-data/en'\nimport IntlMessageFormat from 'intl-messageformat'\nimport { addLocaleData, get } from './utils'\n\nconst defaultMessages = {}\nconst browserLanguage = window.navigator.language || window.navigator.browserLanguage\n/* add default locale on startup, import on src folder */\naddLocaleData(defaultLocaleData)\n\nexport const formatter = (...args) => new IntlMessageFormat(...args)\n\nconst formatMessage = (params, message = '', ...args) => {\n  if (params) {\n    try {\n      return formatter(message, ...args).format(params)\n    } catch (e) {\n      console.warn('/HOC k-intl/', e.message) // eslint-disable-line no-console\n    }\n  }\n  return message\n}\n\nconst getKey = (path) => {\n  const splitPath = path.split('.')\n  return splitPath[splitPath.length - 1]\n}\n\nconst getSubPaths = (locale, paths, config) => {\n  const subMessages = get(locale, paths)\n\n  if (!subMessages || typeof subMessages === 'string') {\n    return { [getKey(paths)]: paths }\n  }\n\n  return Object\n    .keys(subMessages)\n    .reduce(\n      (acc, curr) => ({ ...acc, [curr]: `${config}.${curr}` }),\n      defaultMessages,\n    )\n}\n\nexport default\n(lang = browserLanguage, locale, customFormats) =>\n  (config = {}, componentProps = []) => {\n    // in case of locale is not initialized\n    if (!locale) return {}\n\n    let paths = config\n    if (typeof paths === 'string') paths = getSubPaths(locale, paths, config)\n    return Object\n      .keys(paths)\n      .reduce((acc, curr) => {\n        const message = get(locale, paths[curr])\n        return { ...acc, [curr]: formatMessage(componentProps[curr], message, lang, customFormats) }\n      }, defaultMessages)\n  }\n","import React, { Component } from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport { wrapDisplayName, getLocale, getLang, getFormats } from './utils'\nimport format from './format'\n\nexport default config => WrappedComponent => class extends Component {\n  static displayName = wrapDisplayName(WrappedComponent, 'Intl')\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.messages = {}\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.context.store.subscribe(() => { this.inject() })\n    this.inject()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.inject(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  inject = (nextProps) => {\n    /* take locale on `config.lang` reducer */\n    const lang = getLang(this.context)\n    /* take locale on `config.locale` reducer */\n    const locale = getLocale(this.context)\n    /* take locale on `config.formats` reducer */\n    const formats = getFormats(this.context)\n\n    /* config can be a function, in which case we pass props to it */\n    let innerConfig = config\n    if (typeof config === 'function') innerConfig = config(this.props)\n\n    /* format messages */\n    const messages = format(lang, locale, formats)(\n      innerConfig,\n      nextProps || this.props,\n    )\n    /* not change messages when the formated messages is identical */\n    if (shallowEqual(this.state.injectedProps.messages, messages)) return\n    this.setState(state => ({\n      ...state,\n      injectedProps: { messages },\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n"],"names":["getConfig","field","mandatory","context","config","store","getState","Error","getLocale","getLang","getFormats","data","concat","forEach","localeData","locale","IntlMessageFormat","__addLocaleData","path","split","reduce","curr","sub","get","defaultMessages","browserLanguage","window","navigator","language","addLocaleData","defaultLocaleData","formatMessage","params","args","message","format","e","warn","lang","customFormats","componentProps","paths","splitPath","subMessages","Object","keys","acc","length","getSubPaths","Component","props","inject","nextProps","_this","formats","innerConfig","messages","shallowEqual","state","injectedProps","setState","unsubscribe","this","subscribe","React","WrappedComponent","displayName","name","constructor","contextTypes"],"mappings":"wmBAAA,ICAMA,EAAY,SAACC,OAAOC,oEAAqB,SAACC,OACxCC,EAASD,EAAQE,OAClBF,EAAQE,MAAMC,YACdH,EAAQE,MAAMC,WAAWF,YAExBA,IAAWA,EAAOH,KAAWC,QAC3B,IAAIK,sBAAsBN,sEAAyEA,iCAEpGG,EAAOH,KAGHO,EAAYR,EAAU,UACtBS,EAAUT,EAAU,QACpBU,EAAaV,EAAU,WAAW,GCXhC,WAAUW,MACAC,OAAOD,GAElBE,QAAQ,SAACC,GAEfA,GAAcA,EAAWC,QAAQC,EAAkBC,gBAAgBH,KCP3E,eAMgBH,EAAMO,SAA0B,iBAATA,EAN3B,SAACP,EAAMO,UACjBA,EAAKC,MAAM,KAAKC,OACd,SAACC,EAAMC,UAAQD,GAAQA,EAAKC,IAC5BX,GAGuDY,CAAIZ,EAAMO,GAAQP,wxBCDvEa,KACAC,EAAkBC,OAAOC,UAAUC,UAAYF,OAAOC,UAAUF,gBAEtEI,EAAcC,GAEd,IAEMC,EAAgB,SAACC,8BAAyBC,uDAAjBC,yDAAU,MACnCF,aAHmB,sCAAIC,kFAAajB,gBAAqBiB,oBAKxCC,UAAYD,IAAME,OAAOH,GAC1C,MAAOI,WACCC,KAAK,eAAgBD,EAAEF,gBAG5BA,oBAwBRI,yDAAOb,EAAiBV,eAAQwB,sBAC/B,eAACnC,4DAAaoC,gEAEPzB,EAAQ,aAET0B,EAAQrC,QACS,iBAAVqC,IAAoBA,EAtBf,SAAC1B,EAAQ0B,EAAOrC,OAJ5BsC,EAKAC,EAAcpB,EAAIR,EAAQ0B,UAE3BE,GAAsC,iBAAhBA,EAIpBC,OACJC,KAAKF,GACLvB,OACC,SAAC0B,EAAKzB,eAAeyB,OAAMzB,EAAUjB,MAAUiB,KAC/CG,SAfEkB,EAQaD,EARItB,MAAM,MACZuB,EAAUK,OAAS,GAORN,GAkBaO,CAAYjC,EAAQ0B,EAAOrC,IAC3DwC,OACJC,KAAKJ,GACLrB,OAAO,SAAC0B,EAAKzB,OACNa,EAAUX,EAAIR,EAAQ0B,EAAMpB,gBACtByB,OAAMzB,EAAOU,EAAcS,EAAenB,GAAOa,EAASI,EAAMC,MAC3Ef,kCCnDgB,oBLLTyB,oCKYFC,EAAO/C,4EACX+C,EAAO/C,aAoBfgD,OAAS,SAACC,OAEFd,EAAO7B,EAAQ4C,EAAKlD,SAEpBY,EAASP,EAAU6C,EAAKlD,SAExBmD,EAAU5C,EAAW2C,EAAKlD,SAG5BoD,EAAcnD,EACI,mBAAXA,IAAuBmD,EAAcnD,EAAOiD,EAAKH,YAGtDM,EAAWrB,EAAOG,EAAMvB,EAAQuC,EAArBnB,CACfoB,EACAH,GAAaC,EAAKH,OAGhBO,EAAaJ,EAAKK,MAAMC,cAAcH,SAAUA,MAC/CI,SAAS,wBACTF,kBACcF,mBAxCdA,cACAE,8VAVkDT,6EAgBlDY,YAAcC,KAAK3D,QAAQE,MAAM0D,UAAU,aAAaZ,gBACxDA,2DAGmBC,QACnBD,OAAOC,uDAIPS,sDA8BHG,gBAACC,OAEKH,KAAKZ,MAELY,KAAKJ,MAAMC,2BA1DdO,uBLNOjB,EKMuBgB,GLLEC,aACpCjB,EAAUkB,MACTlB,EAAUmB,aAAenB,EAAUmB,YAAYD,MAChD,iBKIIE,oBACE,kBAAM"}