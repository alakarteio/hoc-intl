{"version":3,"file":"index.js","sources":["src/format.js","src/core.jsx","src/getDisplayName.js"],"sourcesContent":["import { get, template } from 'lodash'\n\nconst interpolate = /{{([\\s\\S]+?)}}/g\nconst defaultLabel = {}\n\nexport default locale => (config, componentProps) =>\n  Object\n    .keys(config)\n    .reduce((acc, curr) => {\n      const label = get(locale, config[curr])\n      if (componentProps && componentProps[curr]) {\n        return { ...acc, [curr]: template(label, { interpolate })(componentProps[curr]) }\n      }\n      return { ...acc, [curr]: label }\n    }, defaultLabel)\n","import React, { Component } from 'react'\nimport format from './format'\nimport getDisplayName from './getDisplayName'\n\nexport default config => WrappedComponent => class extends Component {\n  static displayName = getDisplayName(WrappedComponent)\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.locale = {}\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.context.store.subscribe(() => { this.format() })\n    this.format()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.format(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  format = (nextProps) => {\n    if (!this.context.store\n      || !this.context.store.getState()\n      || !this.context.store.getState().locale) {\n      throw new Error('/ HOC k-intl / locale is not readable. make sure that this one is available at the root of your redux store')\n    }\n\n    /* not change labels when the sub store local not change */\n    if (this.context.store.getState().locale === this.locale) return\n    this.locale = this.context.store.getState().locale\n\n    this.setState(state => ({\n      ...state,\n      injectedProps: {\n        labels: format(this.context.store.getState().locale)(config, nextProps || this.props),\n      },\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n","export default Component => `Intl(${\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n})`\n"],"names":["interpolate","defaultLabel","config","componentProps","Object","keys","reduce","acc","curr","label","get","locale","template","props","context","format","nextProps","_this","store","getState","Error","setState","state","Component","unsubscribe","this","subscribe","React","WrappedComponent","injectedProps","displayName","name","constructor","contextTypes"],"mappings":"6iCAEMA,EAAc,kBACdC,0BAEmB,SAACC,EAAQC,UAChCC,OACGC,KAAKH,GACLI,OAAO,SAACC,EAAKC,OACNC,EAAQC,MAAIC,EAAQT,EAAOM,WAC7BL,GAAkBA,EAAeK,QACvBD,OAAMC,EAAOI,WAASH,GAAST,eAAlBY,CAAiCT,EAAeK,WAE/DD,OAAMC,EAAOC,KACxBR,+BCVkB,wDAOXY,EAAOC,4EACXD,EAAOC,aAoBfC,OAAS,SAACC,OACHC,EAAKH,QAAQI,QACZD,EAAKH,QAAQI,MAAMC,aACnBF,EAAKH,QAAQI,MAAMC,WAAWR,aAC5B,IAAIS,MAAM,+GAIdH,EAAKH,QAAQI,MAAMC,WAAWR,SAAWM,EAAKN,WAC7CA,OAASM,EAAKH,QAAQI,MAAMC,WAAWR,SAEvCU,SAAS,wBACTC,yBAEOP,EAAOE,EAAKH,QAAQI,MAAMC,WAAWR,OAArCI,CAA6Cb,EAAQc,GAAaC,EAAKJ,gBAjC9EF,YACAW,8VAVkDC,6EAgBlDC,YAAcC,KAAKX,QAAQI,MAAMQ,UAAU,aAAaX,gBACxDA,2DAGmBC,QACnBD,OAAOC,uDAIPQ,sDAwBHG,gBAACC,OAEKH,KAAKZ,MAELY,KAAKH,MAAMO,2BApDdC,wBAA6BF,GCJ1BE,aACPP,EAAUQ,MACTR,EAAUS,aAAeT,EAAUS,YAAYD,MAChD,iBDGIE,oBACE,kBAAM"}