{"version":3,"file":"index.js","sources":["src/utils/wrapDisplayName.js","src/utils/storeSelector.js","src/utils/localeDataRegistry.js","src/format.js","src/core.jsx"],"sourcesContent":["export default (Component, wrapperName) => (\n  `${wrapperName || 'intl'} (${Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'})`\n)\n","const getConfig = (field, mandatory = true) => (context) => {\n  const config = context.store\n    && context.store.getState()\n    && context.store.getState().config\n\n  if ((!config || !config[field]) && mandatory) {\n    throw new Error(`/ HOC k-intl / ${field} is not readable. Make sure that this one is available at config.${field} on your redux store`)\n  }\n  return config[field]\n}\n\nexport const getLocale = getConfig('locale')\nexport const getLang = getConfig('lang')\nexport const getFormats = getConfig('formats', false)\n","import IntlMessageFormat from 'intl-messageformat'\n\nexport default function (data) {\n  const localeDatas = [].concat(data)\n\n  localeDatas.forEach((localeData) => {\n    // eslint-disable-next-line no-underscore-dangle\n    if (localeData && localeData.locale) IntlMessageFormat.__addLocaleData(localeData)\n  })\n}\n","// eslint-disable-next-line import/no-unresolved, import/extensions\nimport defaultLocaleData from 'k-intl/locale-data/en'\nimport { get } from 'lodash'\nimport IntlMessageFormat from 'intl-messageformat'\nimport { addLocaleData } from './utils'\n\nconst defaultMessages = {}\nconst browserLanguage = window.navigator.language || window.navigator.browserLanguage\n/* add default locale on startup, import on src folder */\naddLocaleData(defaultLocaleData)\n\nexport const formatter = (...args) => new IntlMessageFormat(...args)\n\nconst formatMessage = (params, message = '', ...args) => {\n  if (params) {\n    return formatter(message, ...args).format(params)\n  }\n  return message\n}\n\nconst getKey = (path) => {\n  const splitPath = path.split('.')\n  return splitPath[splitPath.length - 1]\n}\n\nconst getSubPaths = (locale, paths, config) => {\n  const subMessages = get(locale, paths)\n\n  if (!subMessages || typeof subMessages === 'string') {\n    return { [getKey(paths)]: paths }\n  }\n\n  return Object\n    .keys(subMessages)\n    .reduce(\n      (acc, curr) => ({ ...acc, [curr]: `${config}.${curr}` }),\n      defaultMessages,\n    )\n}\n\nexport default\n(lang = browserLanguage, locale, customFormats) =>\n  (config = {}, componentProps = []) => {\n    // in case of locale is not initialized\n    if (!locale) return {}\n\n    let paths = config\n    if (typeof paths === 'string') paths = getSubPaths(locale, paths, config)\n    return Object\n      .keys(paths)\n      .reduce((acc, curr) => {\n        const message = get(locale, paths[curr])\n        return { ...acc, [curr]: formatMessage(componentProps[curr], message, lang, customFormats) }\n      }, defaultMessages)\n  }\n","import React, { Component } from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport { wrapDisplayName, getLocale, getLang, getFormats } from './utils'\nimport format from './format'\n\nexport default config => WrappedComponent => class extends Component {\n  static displayName = wrapDisplayName(WrappedComponent, 'Intl')\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.messages = {}\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.context.store.subscribe(() => { this.inject() })\n    this.inject()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.inject(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  inject = (nextProps) => {\n    /* take locale on `config.lang` reducer */\n    const lang = getLang(this.context)\n    /* take locale on `config.locale` reducer */\n    const locale = getLocale(this.context)\n    /* take locale on `config.formats` reducer */\n    const formats = getFormats(this.context)\n    const messages = format(lang, locale, formats)(\n      config,\n      nextProps || this.props,\n    )\n    /* not change messages when the formated messages is identical */\n    if (shallowEqual(this.state.injectedProps.messages, messages)) return\n    this.setState(state => ({\n      ...state,\n      injectedProps: { messages },\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n"],"names":["getConfig","field","mandatory","context","config","store","getState","Error","getLocale","getLang","getFormats","data","concat","forEach","localeData","locale","IntlMessageFormat","__addLocaleData","defaultMessages","browserLanguage","window","navigator","language","addLocaleData","defaultLocaleData","formatMessage","params","args","message","format","lang","customFormats","componentProps","paths","splitPath","subMessages","get","Object","keys","reduce","acc","curr","split","length","Component","props","inject","nextProps","_this","formats","messages","shallowEqual","state","injectedProps","setState","unsubscribe","this","subscribe","React","WrappedComponent","displayName","name","constructor","contextTypes"],"mappings":"yoBAAA,ICAMA,EAAY,SAACC,OAAOC,oEAAqB,SAACC,OACxCC,EAASD,EAAQE,OAClBF,EAAQE,MAAMC,YACdH,EAAQE,MAAMC,WAAWF,YAExBA,IAAWA,EAAOH,KAAWC,QAC3B,IAAIK,wBAAwBN,sEAAyEA,iCAEtGG,EAAOH,KAGHO,EAAYR,EAAU,UACtBS,EAAUT,EAAU,QACpBU,EAAaV,EAAU,WAAW,GCXhC,WAAUW,MACAC,OAAOD,GAElBE,QAAQ,SAACC,GAEfA,GAAcA,EAAWC,QAAQC,EAAkBC,gBAAgBH,8xBCDrEI,KACAC,EAAkBC,OAAOC,UAAUC,UAAYF,OAAOC,UAAUF,gBAEtEI,EAAcC,GAEd,IAEMC,EAAgB,SAACC,8BAAyBC,uDAAjBC,yDAAU,UACnCF,EAHmB,sCAAIC,kFAAaX,gBAAqBW,oBAI1CC,UAAYD,IAAME,OAAOH,GAErCE,oBAwBRE,yDAAOX,EAAiBJ,eAAQgB,sBAC/B,eAAC3B,4DAAa4B,gEAEPjB,EAAQ,aAnBIA,EAAQkB,EAAO7B,EAJ5B8B,EAKAC,EAoBAF,EAAQ7B,QACS,iBAAV6B,IAtBMlB,EAsBkCA,EAtB1BkB,EAsBkCA,EAtB3B7B,EAsBkCA,EArB9D+B,EAAcC,MAAIrB,EAAQkB,GAqBCA,EAnB5BE,GAAsC,iBAAhBA,EAIpBE,OACJC,KAAKH,GACLI,OACC,SAACC,EAAKC,eAAeD,OAAMC,EAAUrC,MAAUqC,KAC/CvB,SAfEgB,EAQaD,EARIS,MAAM,MACZR,EAAUS,OAAS,GAORV,IAmBnBI,OACJC,KAAKL,GACLM,OAAO,SAACC,EAAKC,OACNb,EAAUQ,MAAIrB,EAAQkB,EAAMQ,gBACtBD,OAAMC,EAAOhB,EAAcO,EAAeS,GAAOb,EAASE,EAAMC,MAC3Eb,kCChDgB,oBJLT0B,oCIYFC,EAAO1C,4EACX0C,EAAO1C,aAoBf2C,OAAS,SAACC,OAEFjB,EAAOrB,EAAQuC,EAAK7C,SAEpBY,EAASP,EAAUwC,EAAK7C,SAExB8C,EAAUvC,EAAWsC,EAAK7C,SAC1B+C,EAAWrB,EAAOC,EAAMf,EAAQkC,EAArBpB,CACfzB,EACA2C,GAAaC,EAAKH,OAGhBM,EAAaH,EAAKI,MAAMC,cAAcH,SAAUA,MAC/CI,SAAS,wBACTF,kBACcF,mBAlCdA,cACAE,8VAVkDR,6EAgBlDW,YAAcC,KAAKrD,QAAQE,MAAMoD,UAAU,aAAaX,gBACxDA,2DAGmBC,QACnBD,OAAOC,uDAIPQ,sDAwBHG,gBAACC,OAEKH,KAAKX,MAELW,KAAKJ,MAAMC,2BApDdO,uBJNOhB,EIMuBe,GJLEC,aACpChB,EAAUiB,MACTjB,EAAUkB,aAAelB,EAAUkB,YAAYD,MAChD,iBIIIE,oBACE,kBAAM"}